#!/usr/bin/perl -w
#
#  LMS version 1.11.13 Dira
#
#  Copyright (C) 2001-2011 LMS Developers
#
#  Please, see the doc/AUTHORS for more information about authors!
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License Version 2 as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.
#
#  $Id: lms-cron-runner,v 1.31 2011/01/18 08:11:58 alec Exp $

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use Switch;
use vars qw($configfile $quiet $help $version);

my $_version = '1.11.13 neter';

my %options = (
	"--config-file|C=s"	=>	\$configfile,
	"--quiet|q"			=>	\$quiet,
	"--help|h"			=>	\$help,
	"--version|v"		=>	\$version
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-cron-runner, version $_version
(C) 2001-2011 LMS Developers

-C, --config-file=/etc/lms/lms.ini	alternate config file (default: /etc/lms/lms.ini);
-h, --help			print this help and exit;
-v, --version			print version info and exit;
-q, --quiet			suppress any output, except errors;

EOF
	exit 0;
}

if($version)
{
	print STDERR <<EOF;
lms-cron-runner, version $_version
(C) 2001-2011 LMS Developers
EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(!$quiet)
{
	print STDOUT "lms-cron-runner, version $_version\n";
	print STDOUT "(C) 2001-2011 LMS Developers\n";
	print STDOUT "Using file $configfile as config.\n";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}

my $ini = new Config::IniFiles -file => $configfile;
print @Config::IniFiles::errors;


my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';

my $dbase;

if($dbtype =~ /mysql/)
{
	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$dbase->do("SET NAMES utf8");
}
elsif($dbtype eq "postgres")
{
	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
}
else
{
	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
	exit 1;
}


#### processing ####

my $dbq = $dbase->prepare("SELECT id, name, servicetype, inet_ntoa(ipaddr) as ipaddr
							 FROM hosts
							WHERE reload = 1");
$dbq->execute();
while (my $row = $dbq->fetchrow_hashref()) {
	print STDERR "id: $row->{'id'} type: $row->{'servicetype'} ip: $row->{'ipaddr'}\n";
	
	my $type = $row->{'servicetype'};

	switch ($type) {
		case('B')		{ print "RELOAD: blokady&warningi\n";
						  system("/var/www/lms/bin/lms-blokady-kopiuj --config-file=$configfile"); }
		case('F')		{ print "RELOAD: firewall\n"; }		
		case('D')		{ print "RELOAD: DNS\n"; }
		case('W')		{ print "RELOAD: apache\n"; }
		case('S')		{ print "RELOAD: sql\n"; }
		case('M')		{ print "RELOAD: mx mail\n"; }
		case('R')		{ print "RELOAD: radius\n"; 
						  system("/usr/bin/perl -T /var/www/lms/bin/lms-radiusload1 --config-file=$configfile"); 
						  system("/usr/bin/perl -T /var/www/lms/bin/lms-radiusload2 --config-file=$configfile"); 
						  system("/usr/bin/perl -T /var/www/lms/bin/lms-radiusload3 --config-file=$configfile"); }
	
	}

	my $dbq = $dbase->prepare("UPDATE hosts set reload = 0, lastreload = unix_timestamp()
								WHERE id = $row->{'id'}");
	$dbq->execute();


}
$dbq->finish();

